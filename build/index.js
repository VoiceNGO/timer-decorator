'use strict';

require('source-map-support/register');

// @providesModule decorators/timer

const instances = new WeakMap();
let counter = 0;

function addToMap(instance) {
  const inst = { enabled: true, index: counter++ };

  instances.set(instance, inst);

  return inst;
}

function getIndex(instance) {
  return (instances.get(instance) || addToMap(instance)).index;
}

function toggle(instance, enabled) {
  (instances.get(instance) || addToMap(instance)).enabled = enabled;
}

function isEnabled(instance) {
  return instances.has(instance) ? instances.get(instance).enabled : addToMap(instance).enabled;
}

function isPromise(obj) {
  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}

module.exports = function (target, key, descriptor) {
  const fn = descriptor.value;

  descriptor.value = function (...args) {
    if (isEnabled(this)) {
      const instanceNum = getIndex(this);
      const timingName = `${this.constructor.name}#${instanceNum}.${key}`;
      const self = this;
      let retVal = null;

      console.time(timingName);
      retVal = fn.apply(self, args);

      if (isPromise(retVal)) {
        retVal.then(console.timeEnd.bind(console, timingName));
      } else {
        console.timeEnd(timingName);
      }

      return retVal;
    } else {
      return fn.call(this, arguments);
    }
  };

  return descriptor;
};

module.exports.enable = function (instance) {
  toggle(instance, true);

  return this;
};

module.exports.disable = function (instance) {
  toggle(instance, false);

  return this;
};

module.exports.release = function (instance) {
  instances.delete(instance);

  return this;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YW5jZXMiLCJXZWFrTWFwIiwiY291bnRlciIsImFkZFRvTWFwIiwiaW5zdGFuY2UiLCJpbnN0IiwiZW5hYmxlZCIsImluZGV4Iiwic2V0IiwiZ2V0SW5kZXgiLCJnZXQiLCJ0b2dnbGUiLCJpc0VuYWJsZWQiLCJoYXMiLCJpc1Byb21pc2UiLCJvYmoiLCJ0aGVuIiwibW9kdWxlIiwiZXhwb3J0cyIsInRhcmdldCIsImtleSIsImRlc2NyaXB0b3IiLCJmbiIsInZhbHVlIiwiYXJncyIsImluc3RhbmNlTnVtIiwidGltaW5nTmFtZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInNlbGYiLCJyZXRWYWwiLCJjb25zb2xlIiwidGltZSIsImFwcGx5IiwidGltZUVuZCIsImJpbmQiLCJjYWxsIiwiYXJndW1lbnRzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInJlbGVhc2UiLCJkZWxldGUiXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTs7QUFFQSxNQUFNQSxZQUFZLElBQUlDLE9BQUosRUFBbEI7QUFDQSxJQUFJQyxVQUFVLENBQWQ7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDMUIsUUFBTUMsT0FBTyxFQUFFQyxTQUFTLElBQVgsRUFBaUJDLE9BQU9MLFNBQXhCLEVBQWI7O0FBRUFGLFlBQVVRLEdBQVYsQ0FBY0osUUFBZCxFQUF3QkMsSUFBeEI7O0FBRUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNJLFFBQVQsQ0FBa0JMLFFBQWxCLEVBQTRCO0FBQzFCLFNBQU8sQ0FBQ0osVUFBVVUsR0FBVixDQUFjTixRQUFkLEtBQTJCRCxTQUFTQyxRQUFULENBQTVCLEVBQWdERyxLQUF2RDtBQUNEOztBQUVELFNBQVNJLE1BQVQsQ0FBZ0JQLFFBQWhCLEVBQTBCRSxPQUExQixFQUFtQztBQUNqQyxHQUFDTixVQUFVVSxHQUFWLENBQWNOLFFBQWQsS0FBMkJELFNBQVNDLFFBQVQsQ0FBNUIsRUFBZ0RFLE9BQWhELEdBQTBEQSxPQUExRDtBQUNEOztBQUVELFNBQVNNLFNBQVQsQ0FBbUJSLFFBQW5CLEVBQTZCO0FBQzNCLFNBQU9KLFVBQVVhLEdBQVYsQ0FBY1QsUUFBZCxJQUEwQkosVUFBVVUsR0FBVixDQUFjTixRQUFkLEVBQXdCRSxPQUFsRCxHQUE0REgsU0FBU0MsUUFBVCxFQUFtQkUsT0FBdEY7QUFDRDs7QUFFRCxTQUFTUSxTQUFULENBQW1CQyxHQUFuQixFQUF3QjtBQUN0QixTQUFPLENBQUMsQ0FBQ0EsR0FBRixLQUFVLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCLE9BQU9BLEdBQVAsS0FBZSxVQUFwRCxLQUFtRSxPQUFPQSxJQUFJQyxJQUFYLEtBQW9CLFVBQTlGO0FBQ0Q7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0MsTUFBVCxFQUFpQkMsR0FBakIsRUFBc0JDLFVBQXRCLEVBQWtDO0FBQ2pELFFBQU1DLEtBQUtELFdBQVdFLEtBQXRCOztBQUVBRixhQUFXRSxLQUFYLEdBQW1CLFVBQVMsR0FBR0MsSUFBWixFQUFrQjtBQUNuQyxRQUFJWixVQUFVLElBQVYsQ0FBSixFQUFxQjtBQUNuQixZQUFNYSxjQUFjaEIsU0FBUyxJQUFULENBQXBCO0FBQ0EsWUFBTWlCLGFBQWMsR0FBRSxLQUFLQyxXQUFMLENBQWlCQyxJQUFLLElBQUdILFdBQVksSUFBR0wsR0FBSSxFQUFsRTtBQUNBLFlBQU1TLE9BQU8sSUFBYjtBQUNBLFVBQUlDLFNBQVMsSUFBYjs7QUFFQUMsY0FBUUMsSUFBUixDQUFhTixVQUFiO0FBQ0FJLGVBQVNSLEdBQUdXLEtBQUgsQ0FBU0osSUFBVCxFQUFlTCxJQUFmLENBQVQ7O0FBRUEsVUFBSVYsVUFBVWdCLE1BQVYsQ0FBSixFQUF1QjtBQUNyQkEsZUFBT2QsSUFBUCxDQUFZZSxRQUFRRyxPQUFSLENBQWdCQyxJQUFoQixDQUFxQkosT0FBckIsRUFBOEJMLFVBQTlCLENBQVo7QUFDRCxPQUZELE1BRU87QUFDTEssZ0JBQVFHLE9BQVIsQ0FBZ0JSLFVBQWhCO0FBQ0Q7O0FBRUQsYUFBT0ksTUFBUDtBQUNELEtBaEJELE1BZ0JPO0FBQ0wsYUFBT1IsR0FBR2MsSUFBSCxDQUFRLElBQVIsRUFBY0MsU0FBZCxDQUFQO0FBQ0Q7QUFDRixHQXBCRDs7QUFzQkEsU0FBT2hCLFVBQVA7QUFDRCxDQTFCRDs7QUE0QkFKLE9BQU9DLE9BQVAsQ0FBZW9CLE1BQWYsR0FBd0IsVUFBU2xDLFFBQVQsRUFBbUI7QUFDekNPLFNBQU9QLFFBQVAsRUFBaUIsSUFBakI7O0FBRUEsU0FBTyxJQUFQO0FBQ0QsQ0FKRDs7QUFNQWEsT0FBT0MsT0FBUCxDQUFlcUIsT0FBZixHQUF5QixVQUFTbkMsUUFBVCxFQUFtQjtBQUMxQ08sU0FBT1AsUUFBUCxFQUFpQixLQUFqQjs7QUFFQSxTQUFPLElBQVA7QUFDRCxDQUpEOztBQU1BYSxPQUFPQyxPQUFQLENBQWVzQixPQUFmLEdBQXlCLFVBQVNwQyxRQUFULEVBQW1CO0FBQzFDSixZQUFVeUMsTUFBVixDQUFpQnJDLFFBQWpCOztBQUVBLFNBQU8sSUFBUDtBQUNELENBSkQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLy8gQHByb3ZpZGVzTW9kdWxlIGRlY29yYXRvcnMvdGltZXJcblxuY29uc3QgaW5zdGFuY2VzID0gbmV3IFdlYWtNYXAoKTtcbmxldCBjb3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkVG9NYXAoaW5zdGFuY2UpIHtcbiAgY29uc3QgaW5zdCA9IHsgZW5hYmxlZDogdHJ1ZSwgaW5kZXg6IGNvdW50ZXIrKyB9O1xuXG4gIGluc3RhbmNlcy5zZXQoaW5zdGFuY2UsIGluc3QpO1xuXG4gIHJldHVybiBpbnN0O1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleChpbnN0YW5jZSkge1xuICByZXR1cm4gKGluc3RhbmNlcy5nZXQoaW5zdGFuY2UpIHx8IGFkZFRvTWFwKGluc3RhbmNlKSkuaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZShpbnN0YW5jZSwgZW5hYmxlZCkge1xuICAoaW5zdGFuY2VzLmdldChpbnN0YW5jZSkgfHwgYWRkVG9NYXAoaW5zdGFuY2UpKS5lbmFibGVkID0gZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gaXNFbmFibGVkKGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZXMuaGFzKGluc3RhbmNlKSA/IGluc3RhbmNlcy5nZXQoaW5zdGFuY2UpLmVuYWJsZWQgOiBhZGRUb01hcChpbnN0YW5jZSkuZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICByZXR1cm4gISFvYmogJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBjb25zdCBmbiA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoaXNFbmFibGVkKHRoaXMpKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZU51bSA9IGdldEluZGV4KHRoaXMpO1xuICAgICAgY29uc3QgdGltaW5nTmFtZSA9IGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0jJHtpbnN0YW5jZU51bX0uJHtrZXl9YDtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgbGV0IHJldFZhbCA9IG51bGw7XG5cbiAgICAgIGNvbnNvbGUudGltZSh0aW1pbmdOYW1lKTtcbiAgICAgIHJldFZhbCA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHJldFZhbCkpIHtcbiAgICAgICAgcmV0VmFsLnRoZW4oY29uc29sZS50aW1lRW5kLmJpbmQoY29uc29sZSwgdGltaW5nTmFtZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKHRpbWluZ05hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0VmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmVuYWJsZSA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIHRvZ2dsZShpbnN0YW5jZSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5kaXNhYmxlID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgdG9nZ2xlKGluc3RhbmNlLCBmYWxzZSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5yZWxlYXNlID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuIl19